[build-system]
requires = [
  "setuptools >= 56",
  "wheel",
  "setuptools_scm[toml]>=3.4"
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "napari/_version.py"

[tool.black]
target-version = ['py38', 'py39', 'py310']
skip-string-normalization = true
line-length = 79
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | examples
    | vendored
    | _vendor
  )/
  | napari/resources/qt.py
  | tools/minreq.py
)
'''

[tool.check-manifest]
ignore = [
  ".cirrus.yml",
  ".pre-commit-config.yaml",
  "asv.conf.json",
  "codecov.yml",
  "Makefile",
  "napari/_version.py",  # added during build by setuptools_scm
  "tools/minreq.py",
  "tox.ini",
  "napari/_qt/qt_resources/_qt_resources_*.py",
  "*.pyi",  # added by make typestubs
  "binder/*",
  ".env_sample",
  ".devcontainer/*",
  "napari/resources/icons/_themes/*/*.svg"
]

[tool.ruff]
line-length = 79
select = [
    "E", "F", "W", #flake8
    "UP", # pyupgrade
    "I", # isort
    "YTT", #flake8-2020
    "TCH", # flake8-type-checing
    "BLE", # flake8-blind-exception
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "COM", # flake8-commas
    "SIM", # flake8-simplify
    "INP", # flake8-no-pep420
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "TID",  # flake8-tidy-imports # replace absolutify import
    "TRY", # tryceratops
    "ICN", # flake8-import-conventions
    "RUF", # ruff specyfic rules
]
ignore = [
    "E501", "UP006", "UP007", "TCH001", "TCH002", "TCH003",
    "A003", # flake8-builtins - we have class attributes violating these rule
    "COM812", # flake8-commas - we don't like adding comma on single line of arguments
    "SIM117", # flake8-simplify - we some of merged with statements are not looking great with black, reanble after drop python 3.9
    "Q000",
    "RET504", # not fixed yet https://github.com/charliermarsh/ruff/issues/2950
    "TRY003", # require implement multiple exception class
    "RUF005", # problem with numpy compatybility, see https://github.com/charliermarsh/ruff/issues/2142#issuecomment-1451038741
    "B028", # need to be fixed
    "PYI015", # it produces bad looking files (@jni opinion)
    "RUF012",
    "RUF013",
    "RUF015",
    "PYI041",
    "PYI024",
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*vendored*",
    "*_vendor*",
]

target-version = "py38"
fix = true

[tool.ruff.per-file-ignores]
"docs/**" = ["A001", "INP001"]
"napari/_vispy/__init__.py" = ["E402"]
"**/_tests/*.py" = ["B011", "INP001", "TRY301", "B018"]
"napari/utils/_testsupport.py" = ["B011"]
"tools/test_strings.py" = ["F401"]
"tools/**" = ["INP001", "T20"]
"examples/**" = ["ICN001", "INP001", "T20"]
"**/vendored/**" = ["TID"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party=['napari']
combine-as-imports = true

[tool.ruff.flake8-import-conventions]
[tool.ruff.flake8-import-conventions.extend-aliases]
# Declare a custom alias for the `matplotlib` module.
"dask.array" = "da"
xarray = "xr"

[tool.pytest.ini_options]
# These follow standard library warnings filters syntax.  See more here:
# https://docs.python.org/3/library/warnings.html#describing-warning-filters
addopts = "--maxfail=5 --durations=10 -rXxs"
pystack_threshold=60

# NOTE: only put things that will never change in here.
# napari deprecation and future warnings should NOT go in here.
# instead... assert the warning with `pytest.warns()` in the relevant test,
# That way we can clean them up when no longer necessary
filterwarnings = [
  "error:::napari", # turn warnings from napari into errors
  "error:::test_.*", # turn warnings in our own tests into errors
  "default:::napari.+vendored.+",  # just print warnings inside vendored modules
  "ignore:Restart required for this change:UserWarning:napari",  # triggered by a lot of async tests
  "ignore::DeprecationWarning:shibokensupport",
  "ignore::DeprecationWarning:ipykernel",
  "ignore::DeprecationWarning:tensorstore",
  "ignore:Accessing zmq Socket:DeprecationWarning:jupyter_client",
  "ignore:pythonw executable not found:UserWarning:",
  "ignore:data shape .* exceeds GL_MAX_TEXTURE_SIZE:UserWarning",
  "ignore:For best performance with Dask arrays in napari:UserWarning:",
  "ignore:numpy.ufunc size changed:RuntimeWarning",
  "ignore:Multiscale rendering is only supported in 2D. In 3D, only the lowest resolution scale is displayed",
  "ignore:Alternative shading modes are only available in 3D, defaulting to none",
  "ignore:distutils Version classes are deprecated::",
  "ignore:There is no current event loop:DeprecationWarning:",
]
markers = [
    "sync_only: Test should only be run synchronously",
    "async_only: Test should only be run asynchronously",
    "examples: Test of examples",
    "disable_qthread_start: Disable thread start in this Test",
    "disable_qthread_pool_start: Disable strarting QRunnable using QThreadPool start in this Test",
    "disable_qtimer_start: Disable timer start in this Test",
    "disable_qanimation_start: Disable animation start in this Test",
]

[tool.mypy]
files = "napari"
# This file triggers an internal mypy error, so exclude collection
# TODO: fix this
plugins =  "numpy.typing.mypy_plugin, pydantic.mypy"
ignore_missing_imports = true
exclude = [
  "_tests",
]
show_error_codes = true
no_implicit_optional = true
warn_redundant_casts = true
ignore_errors = true

[[tool.mypy.overrides]]
module = ['*._tests.*']
ignore_errors = true

[[tool.mypy.overrides]]
module = [
  'napari.plugins.*',
  'napari.settings.*',
  'napari.types.*',
]
ignore_errors = false
no_implicit_optional = true
warn_unused_ignores = true
check_untyped_defs = true
plugins =  "numpy.typing.mypy_plugin, pydantic.mypy"

# # maybe someday :)
# disallow_any_generics = true
# no_implicit_reexport = true
# disallow_untyped_defs = true
