name: Run test by tox

on:
  workflow_call:
    inputs:
      python_version:
        required: true
        type: string
      platform:
        required: false
        type: string
        default: "ubuntu-latest"
      toxenv:
        required: false
        type: string
        default: ""
      qt_backend:
        required: false
        type: string
        default: "headless"
      min_req:
        required: false
        type: string
        default: ""
      coverage:
        required: false
        type: string
        default: no_cov
      timeout:
        required: false
        type: number
        default: 40
      constraints_suffix:
        required: false
        type: string
        default: ""
      tox_extras:
        required: false
        type: string
        default: ""
      artifacts_suffix:
        required: false
        type: string
        default: ""

jobs:
  test:
    name: ${{ inputs.platform }} py ${{ inputs.python_version }} ${{ inputs.toxenv || inputs.qt_backend }} ${{ inputs.MIN_REQ && 'min_req' }} ${{ inputs.coverage }}
    runs-on: ${{ inputs.platform }}
    env:
      TOXENV: ${{ inputs.toxenv }}
      NUMPY_EXPERIMENTAL_ARRAY_FUNCTION: ${{ inputs.MIN_REQ || 1 }}
      PYVISTA_OFF_SCREEN: True
      MIN_REQ: ${{ inputs.min_req }}
      FORCE_COLOR: 1
      PIP_CONSTRAINT: ${{ github.workspace }}/resources/constraints/constraints_py${{ inputs.python_version }}${{ inputs.min_req && '_min_req' }}${{ inputs.constraints_suffix }}.txt
      UV_CONSTRAINT: ${{ github.workspace }}/resources/constraints/constraints_py${{ inputs.python_version }}${{ inputs.min_req && '_min_req' }}${{ inputs.constraints_suffix }}.txt
      # Above we calculate path to constraints file based on python version and platform
      # Because there is no single PyQt5-Qt5 package version available for all platforms we was forced to use
      # different constraints files for Windows. An example with macOS arm64:
      # ${{ (((inputs.platform == 'macos-latest') && '_macos_arm') || '') }} - if platform is macOS-latest then add '_macos_arm' to constraints file name, else add nothing
      # ${{ inputs.min_req && '_min_req' }} - if min_req is set then add '_min_req' to constraints file name, else add nothing
      #  ${{ inputs.constraints_suffix }} - additional suffix for constraints file name (used for example testing).
      COVERAGE: ${{ inputs.coverage }}
      TOX_WORK_DIR: .tox
      TOX_EXTRAS: ${{ inputs.tox_extras }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: wheel
          path: dist

      - name: Set wheel path
        run: echo "WHEEL_PATH=$(ls dist/*.whl)" >> "$GITHUB_ENV"
        shell: bash

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ inputs.python_version }}
          cache: "pip"
          cache-dependency-path: pyproject.toml

      - uses: tlambert03/setup-qt-libs@19e4ef2d781d81f5f067182e228b54ec90d23b76 # v1.8

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@b1de5da23ed0a6d14e0aeee8ed52fdd87af2363c # v2.0.2
        continue-on-error: true

      - name: Set Windows resolution
        if: runner.os == 'Windows'
        run: Set-DisplayResolution -Width 1920 -Height 1080 -Force
        shell: powershell

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1
          if (Test-Path -Path "C:\Windows\system32\opengl32.dll" -PathType Leaf) {Exit 0} else {Exit 1}
        shell: powershell

      - name: Disable ptrace security restrictions
        if: runner.os == 'Linux'
        run: |
          echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

      # tox and tox-gh-actions will take care of the "actual" installation
      # of python dependencies into a virtualenv.  see tox.ini for more
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install setuptools tox tox-gh-actions tox-min-req tox-uv
        env:
          PIP_CONSTRAINT: ""

      # here we pass off control of environment creation and running of tests to tox
      # tox-gh-actions, installed above, helps to convert environment variables into
      # tox "factors" ... limiting the scope of what gets tested on each platform
      # for instance, on ubuntu-latest with python 3.8, it would be equivalent to this command:
      # `tox -e py38-linux-pyqt,py38-linux-pyside`
      # see tox.ini for more

      - name: Split qt backend
        # This is a hack to split the qt_backend variable into four parts
        # This is required as github actions allow setting only one environment variable in
        # a single line (redirection to $GITHUB_ENV).
        #
        # For example, if qt_backend is set to "pyqt5,pyside2", then the following four
        # environment variables will be set:
        # MAIN=pyqt5
        # SECOND=pyside2
        # THIRD=none
        # FOURTH=none
        shell: bash
        run: |
          python tools/split_qt_backend.py 0 ${{ inputs.qt_backend }} >> "$GITHUB_ENV"
          python tools/split_qt_backend.py 1 ${{ inputs.qt_backend }} >> "$GITHUB_ENV"
          python tools/split_qt_backend.py 2 ${{ inputs.qt_backend }} >> "$GITHUB_ENV"
          python tools/split_qt_backend.py 3 ${{ inputs.qt_backend }} >> "$GITHUB_ENV"

      - name: Test with tox main
        timeout-minutes: ${{ inputs.timeout }}
        uses: aganders3/headless-gui@f85dd6316993505dfc5f21839d520ae440c84816 # v2.2
        with:
          shell: bash
          run: |
            echo ${{ env.MAIN }}
            tox --version
            python -m tox run --installpkg ${{ env.WHEEL_PATH }} -- --basetemp=.pytest_tmp
            rm -r .tox
        env:
          BACKEND: ${{ env.MAIN }}
          TOX_WORK_DIR: .tox

      - name: Test with tox second
        timeout-minutes: ${{ inputs.timeout }}
        uses: aganders3/headless-gui@f85dd6316993505dfc5f21839d520ae440c84816 # v2.2
        if : ${{ env.SECOND != 'none' }}
        with:
          shell: bash
          run: |
            python -m tox run --installpkg ${{ env.WHEEL_PATH }} -- --basetemp=.pytest_tmp
            rm -r .tox
        env:
          BACKEND: ${{ env.SECOND }}
          NAPARI_TEST_SUBSET: qt

      - name: Test with tox third
        timeout-minutes: ${{ inputs.timeout }}
        uses: aganders3/headless-gui@f85dd6316993505dfc5f21839d520ae440c84816 # v2.2
        if : ${{ env.THIRD != 'none' }}
        with:
          shell: bash
          run: |
            python -m tox run --installpkg ${{ env.WHEEL_PATH }} -- --basetemp=.pytest_tmp
            rm -r .tox
        env:
          BACKEND: ${{ env.THIRD }}
          NAPARI_TEST_SUBSET: qt

      - name: Test with tox fourth
        timeout-minutes: ${{ inputs.timeout }}
        uses: aganders3/headless-gui@f85dd6316993505dfc5f21839d520ae440c84816 # v2.2
        if: ${{ env.FOURTH != 'none' }}
        with:
          shell: bash
          run: |
            python -m tox run --installpkg ${{ env.WHEEL_PATH }} -- --basetemp=.pytest_tmp
            rm -r .tox
        env:
          BACKEND: ${{ env.FOURTH }}
          NAPARI_TEST_SUBSET: qt

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: test artifacts ${{ inputs.platform }} py ${{ inputs.python_version }} ${{ inputs.toxenv || inputs.qt_backend }} ${{ inputs.artifacts_suffix }}
          path: .pytest_tmp
          include-hidden-files: true

      - name: Upload leaked viewer graph
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: leaked ${{ inputs.platform }} py ${{ inputs.python_version }} ${{ inputs.toxenv || inputs.qt_backend }} ${{ inputs.artifacts_suffix }}
          path: ./*leak-backref-graph*.pdf

      - name: Upload pytest timing reports as json ${{ inputs.platform }} py ${{ inputs.python_version }} ${{ inputs.toxenv || inputs.qt_backend }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: upload pytest timing json ${{ inputs.platform }} py ${{ inputs.python_version }} ${{ inputs.toxenv || inputs.qt_backend }} ${{ inputs.tox_extras }} ${{ inputs.artifacts_suffix }}
          path: |
            ./report-*.json

      - name: Upload coverage data
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: ${{ inputs.coverage == 'cov' }}
        with:
          name: coverage reports ${{ inputs.platform }} py ${{ inputs.python_version }} ${{ inputs.toxenv || inputs.qt_backend }} ${{ inputs.artifacts_suffix }}
          include-hidden-files: true
          path: |
            ./.coverage.*
