# Our minimal suite of tests that run on each pull request
name: PR Test

on:
  pull_request:
    branches:
      - main

jobs:
  manifest:
    # make sure all necessary files will be bundled in the release
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install check-manifest
      - name: Check Manifest
        run: check-manifest

  localization_syntax:
    # make sure all necessary files will be bundled in the release
    name: Check l18n syntax
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install --upgrade pip
      - name: Check localization formatting
        run: |
          pip install --upgrade pip semgrep
          # f"..." and f'...' are the same for semgrep
          semgrep --error --lang python --pattern 'trans._(f"...")' napari
          semgrep --error --lang python --pattern 'trans._($X.format(...))' napari

  test:
    name: ${{ matrix.platform }} ${{ matrix.python }} ${{ matrix.toxenv || matrix.backend }} ${{ matrix.MIN_REQ && 'min_req' }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        python: ["3.8", "3.9", "3.10"]
        include:
          # Windows py38
          - python: 3.8
            platform: windows-latest
            backend: pyqt
          - python: 3.8
            platform: windows-latest
            backend: pyside
          - python: 3.9
            platform: macos-11
            backend: pyqt # (only testing pyqt on mac in the interest of speed)
          # minimum specified requirements
          - python: 3.8
            platform: ubuntu-18.04
            MIN_REQ: 1
          # test with --async_only
          - python: 3.8
            platform: ubuntu-18.04
            toxenv: async-pyqt-py38-linux
          # test without any Qt backends
          - python: 3.8
            platform: ubuntu-18.04
            toxenv: headless-py38-linux

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - uses: tlambert03/setup-qt-libs@v1

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1
          if (Test-Path -Path "C:\Windows\system32\opengl32.dll" -PathType Leaf) {Exit 0} else {Exit 1}

      # tox and tox-gh-actions will take care of the "actual" installation
      # of python dependendencies into a virtualenv.  see tox.ini for more
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install setuptools tox tox-gh-actions
          python tools/minreq.py
        env:
          # tools/minreq.py sets all deps to their minumim stated versions
          # it is a no-op if MIN_REQ is not set
          MIN_REQ: ${{ matrix.MIN_REQ }}

      # The two following steps try to cache and speedup tox env creation on linux.
      # in the first one we produce the date as value we can refer to,
      # in order to change cache key every ~24h.
      # in the second we restore cache from previous run.
      # a step later on cull the files in the directory we cache to avoid
      # going over the GitHub 5G limit.
      - name: Get current date to flush cache every day
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Cache tox Virtualenv
        uses: actions/cache@v2
        if: runner.os == 'Linux'
        env:
          cache-name: cache-tox-${{ matrix.platform }}-${{ matrix.python }}-${{ matrix.toxenv || matrix.backend }}-${{ steps.date.outputs.date }}
        with:
          path: /tmp/.tox/
          key: ${{ matrix.platform }}-${{ matrix.python }}-${{ matrix.toxenv || matrix.backend }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('tox.ini') }}-${{ steps.date.outputs.date }}
      # here we pass off control of environment creation and running of tests to tox
      # tox-gh-actions, installed above, helps to convert environment variables into
      # tox "factors" ... limiting the scope of what gets tested on each platform
      # for instance, on ubuntu-latest with python 3.8, it would be equivalent to this command:
      # `tox -e py38-linux-pyqt,py38-linux-pyside`
      # see tox.ini for more
      - name: Test with tox
        uses: GabrielBB/xvfb-action@v1
        with:
          run: python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}
          BACKEND: ${{ matrix.backend }}
          TOXENV: ${{ matrix.toxenv }}
          NUMPY_EXPERIMENTAL_ARRAY_FUNCTION: ${{ matrix.MIN_REQ || 1 }}
          PYVISTA_OFF_SCREEN: True
          MIN_REQ: ${{ matrix.MIN_REQ }}
      # this steps display the cached folder size for debug and
      # remove the biggest contenders.
      - name: Display Cache size, and remove largest files from cache.
        if: runner.os == 'Linux'
        run: |
          echo "Biggest files in site-packages"
          du -s /tmp/.tox/*py*/lib/py*/site-packages/* | sort -n | tail -n 5
          echo "Biggest files in tox cache"
          du -hs /tmp/.tox/*
          echo "Cleaning a few of the biggest cache"
          rm -rf /tmp/.tox/*py*/lib/py*/site-packages/semgrep
          rm -rf /tmp/.tox/*py*/lib/py*/site-packages/torch
          find /tmp/.tox/*py*/lib/* -name '*.pyc' -delete
          echo "List of biggest folder after clearing"
          du -s /tmp/.tox/*py*/lib/py*/site-packages/* | sort -n | tail -n 5
          du -hs /tmp/.tox/*
      - name: Coverage
        if: runner.os == 'Linux' && matrix.python == '3.9'
        uses: codecov/codecov-action@v1

  test_pip_install:
    name: ubuntu-latest 3.9 pip install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: napari-from-github

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: tlambert03/setup-qt-libs@v1

      - name: Install this commit
        run: |
          pip install --upgrade pip
          pip install ./napari-from-github[all,testing]

      - name: Test
        uses: GabrielBB/xvfb-action@v1
        with:
          run: python -m pytest --pyargs napari --color=yes
