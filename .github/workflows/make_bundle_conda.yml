on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

name: Conda

jobs:
  conda-build:
    name: Create packages
    runs-on: ubuntu-latest
    if: github.repository == 'napari/napari'
    env:
      conda_bld_suffix: /napari-feedstock/build_artifacts/
    outputs:
      artifact-id: ${{ steps.artifact-id.outputs.name }}

    steps:
      - name: Checkout napari source
        uses: actions/checkout@v2
        with:
          path: napari-source
          fetch-depth: 0

      - name: Checkout conda-forge feedstock
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          # TODO: Match upstream, not fork!
          repository: jaimergp/napari-feedstock
          ref: menuinst-cep
          path: napari-feedstock

      - name: Create environment.yml
        shell: bash
        run: |
          cat <<EOF > environment.yml
          name: test
          channels:
            - conda-forge
          dependencies:
            - conda-smithy
            - python 3.8
            - pip
            - tomlkit
            - ruamel.yaml
            - anaconda-client
          EOF

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-version: latest
          environment-file: environment.yml

      - name: install napari
        shell: bash -l {0}
        working-directory: napari-source
        run: |
          set -x
          pip install -e . --no-deps -vvv
          version=$(python bundle.py --version)
          arch=$(python bundle.py --arch)
          echo NAPARI_VERSION=${version} >> $GITHUB_ENV
          echo NAPARI_ARCH=${arch} >> $GITHUB_ENV

      - name: Patch and rerender feedstock
        shell: bash -l {0}
        working-directory: napari-feedstock
        run: |
          set -euxo pipefail
          # This is the source path once mounted _inside_ the Docker image!
          source_path="/home/conda/feedstock_root/napari-source"

          sed -i -e "s|{% set version = \".*\" %}|{% set version = \"${NAPARI_VERSION}\" %}|" \
                 -e "s|  - url: https://pypi.*|  path: ${source_path}|" \
                 -e "s|  - url: https://raw\.github.*||" \
                 -e "s|    folder:.*||" \
                 -e "s|    sha256:.*||g"  \
                 recipe/meta.yaml

          conda-smithy rerender
          git diff
          mv ${GITHUB_WORKSPACE}/napari-source .

      - name: Run build scripts (PyQt)
        shell: bash -l {0}
        working-directory: napari-feedstock
        env:
          DOCKER_IMAGE: quay.io/condaforge/linux-anvil-comp7
          CONFIG: linux_64_qt_bindingspyqt # filename under feedstock's .ci_support/
          CI: github_actions
        run: |
          export CONDA_BLD_PATH="${{ github.workspace }}${{ env.conda_bld_suffix }}"
          ./.scripts/run_docker_build.sh

      - name: Run build scripts (PySide)
        shell: bash -l {0}
        working-directory: napari-feedstock
        env:
          DOCKER_IMAGE: quay.io/condaforge/linux-anvil-comp7
          CONFIG: linux_64_qt_bindingspyside2 # filename under feedstock's .ci_support/
          CI: github_actions
        run: |
          export CONDA_BLD_PATH="${{ github.workspace }}${{ env.conda_bld_suffix }}"
          ./.scripts/run_docker_build.sh

      - name: Export artifact identifier
        id: artifact-id
        run: |
          name=pkgs-napari-${{ env.NAPARI_VERSION }}-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
          echo "::set-output name=name::${name}"

      - name: Upload packages as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.artifact-id.outputs.name }}
          path: ${{ github.workspace }}${{ env.conda_bld_suffix }}noarch/*.tar.bz2

      - name: Upload to anaconda.org
        shell: bash -l {0}
        # Only upload to anaconda.org/napari if it's a nightly (version with *dev* suffix)
        # or a tag event (either RC or final). Nightlies and RCs go to the nightly channel.
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/v')
        run: |
          label_args=""
          if [[ $NAPARI_VERSION == *rc* || $NAPARI_VERSION == *dev* ]]; then
            label_args="-l nightly"
          fi
          anaconda \
            -t ${{ secrets.ANACONDA_TOKEN }} \
            upload \
            --skip-existing \
            -u napari \
            $label_args \
            ${GITHUB_WORKSPACE}${conda_bld_suffix}noarch/*.tar.bz2

  constructor-bundle:
    name: Bundle ${{ matrix.target-platform }}
    runs-on: ${{ matrix.os }}
    needs: conda-build
    if: github.repository == 'napari/napari'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-18.04
            python-version: "3.9"
            target-platform: "linux-64"
          - os: macos-latest
            python-version: "3.9"
            target-platform: "osx-64"
          - os: macos-latest
            python-version: "3.9"
            target-platform: "osx-arm64"
          - os: windows-latest
            python-version: "3.8"
            target-platform: "win-64"
    env:
      GITHUB_TOKEN: ${{ github.token }}
      DISPLAY: ":99.0"
      CONDA_BLD_PATH: ${{ github.workspace }}/conda-bld
      CONSTRUCTOR_TARGET_PLATFORM: ${{ matrix.target-platform }}
    outputs:
      licenses-artifact: ${{ steps.licenses.outputs.licenses_artifact }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create environment.yml
        shell: bash
        run: |
          cat <<EOF > environment.yml
          name: build-bundle
          channels:
            - napari/label/bundle_tools
            - conda-forge
          dependencies:
            - python ${{ matrix.python-version }}
            - pip
            - constructor
            - conda-build
            - ruamel.yaml
            - conda-standalone
          EOF
      - name: install micromamba
        uses: mamba-org/provision-with-micromamba@main

      - name: set up build dependencies
        shell: bash -l {0}
        run: |
          python -m pip install -e '.[bundle_build]'

      - name: get tag / arch-suffix / extension / artifact-name / conda-standalone
        shell: bash -l {0}
        run: |
          VER=$(python bundle_conda.py --version)
          echo "version=${VER}" >> $GITHUB_ENV
          echo "Version: ${VER}"
          ARCH_SUFFIX=$(python bundle_conda.py --arch)
          echo "arch-suffix=${ARCH_SUFFIX}" >> $GITHUB_ENV
          echo "Machine: ${ARCH_SUFFIX}"
          EXTENSION=$(python bundle_conda.py --ext)
          echo "extension=${EXTENSION}" >> $GITHUB_ENV
          echo "Extension: ${EXTENSION}"
          ARTIFACT_NAME=$(python bundle_conda.py --artifact-name)
          echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_ENV
          echo "Expected artifact name: ${ARTIFACT_NAME}"

          host_platform=$(conda info --json | jq -r .platform)
          if [[ "$host_platform" != "$CONSTRUCTOR_TARGET_PLATFORM" ]]; then
            prefix="${RUNNER_TEMP}/conda-exe"
            CONDA_SUBDIR=$CONSTRUCTOR_TARGET_PLATFORM \
              conda create -yq -p "${prefix}" -c napari/label/bundle_tools conda-standalone
            echo "CONSTRUCTOR_CONDA_EXE=${prefix}/standalone_conda/conda.exe" >> $GITHUB_ENV
          fi

          mkdir -p ${CONDA_BLD_PATH}/noarch

      - name: Download local build artifacts (napari)
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.conda-build.outputs.artifact-id }}
          path: ${{ env.CONDA_BLD_PATH }}/noarch

      - name: Index local packages (if any)
        shell: bash -l {0}
        run: |
          pkgs=$(shopt -s nullglob dotglob; echo "${CONDA_BLD_PATH}/noarch/*.tar.bz2")
          if (( ${#pkgs} )); then
            conda index "${CONDA_BLD_PATH}"
            conda search -c local --override-channels
            echo CONSTRUCTOR_USE_LOCAL=1 >> $GITHUB_ENV
          else
            echo "No local packages found, assuming latest release"
          fi

      # instructions taken from
      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development#add-a-step-to-your-workflow
      - name: Load signing certificate (MacOS)
        shell: bash -l {0}
        # We only sign pushes to main, nightlies, RCs and final releases
        if: runner.os == 'macOS' && (github.event_name == 'schedule' || github.event_name == 'push')
        env:
          APPLE_APPLICATION_CERTIFICATE_BASE64: ${{ secrets.APPLE_APPLICATION_CERTIFICATE_BASE64 }}
          APPLE_INSTALLER_CERTIFICATE_BASE64: ${{ secrets.APPLE_INSTALLER_CERTIFICATE_BASE64 }}
          APPLE_INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_INSTALLER_CERTIFICATE_PASSWORD }}
          TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          INSTALLER_CERTIFICATE_PATH="$RUNNER_TEMP/installer_developer_cert.p12"
          APPLICATION_CERTIFICATE_PATH="$RUNNER_TEMP/application_developer_cert.p12"
          KEYCHAIN_PATH="$RUNNER_TEMP/installer-signing.keychain-db"

          # import certificate and provisioning profile from secrets
          echo -n "$APPLE_INSTALLER_CERTIFICATE_BASE64" | base64 --decode --output $INSTALLER_CERTIFICATE_PATH
          echo -n "$APPLE_APPLICATION_CERTIFICATE_BASE64" | base64 --decode --output $APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$TEMP_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$TEMP_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $INSTALLER_CERTIFICATE_PATH -P $APPLE_INSTALLER_CERTIFICATE_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $APPLICATION_CERTIFICATE_PATH -P $APPLE_INSTALLER_CERTIFICATE_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # export identity name
          signing_identity=$(security find-identity $KEYCHAIN_PATH | grep -m 1 -o '"Developer ID Installer.*"' | tr -d '"')
          notarization_identity=$(security find-identity $KEYCHAIN_PATH | grep -m 1 -o '"Developer ID Application.*"' | tr -d '"')

          echo "CONSTRUCTOR_SIGNING_IDENTITY=${signing_identity}" >> $GITHUB_ENV
          echo "CONSTRUCTOR_NOTARIZATION_IDENTITY=${notarization_identity}" >> $GITHUB_ENV

      - name: Load signing certificate (Windows)
        # We only sign pushes to main, nightlies, RCs and final releases
        if: runner.os == 'Windows' && (github.event_name == 'schedule' || github.event_name == 'push')
        # We are signing with Apple's certificate to provide _something_
        # This is not trusted by Windows so the warnings are still there, but curious users
        # will be able to check it's actually us if necessary
        run: |
          Set-Content -Path "${{ runner.temp }}/certificate.b64.txt" -Value '${{ secrets.APPLE_APPLICATION_CERTIFICATE_BASE64 }}'
          certutil -decode "${{ runner.temp }}/certificate.b64.txt" "${{ runner.temp }}/certificate.pfx"

          echo "CONSTRUCTOR_SIGNING_CERTIFICATE=${{ runner.temp }}/certificate.pfx" >> $Env:GITHUB_ENV
          echo "CONSTRUCTOR_PFX_CERTIFICATE_PASSWORD=${{ secrets.APPLE_INSTALLER_CERTIFICATE_PASSWORD }}" >> $Env:GITHUB_ENV
          echo "CONSTRUCTOR_SIGNTOOL_PATH=C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" >> $Env:GITHUB_ENV

      # TODO: Consider a refactor here; maybe an org action we can reuse or at least a script
      - name: Make Bundle (Linux)
        if: runner.os == 'Linux'
        shell: bash -l {0}
        run: |
          echo "::group::Install apt dependencies"
          sudo apt-get update
          sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 \
            libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 libxcb-shape0 libqt5gui5
          echo "::endgroup::"
          xvfb-run --auto-servernum python bundle_conda.py

      - name: Make Bundle (MacOS/Windows)
        shell: bash -l {0}
        if: runner.os != 'Linux'
        run: python bundle_conda.py

      - name: Collect licenses
        id: licenses
        shell: bash -l {0}
        run: |
          zipname=$(python bundle_conda.py --licenses)
          echo "LICENSES_ARTIFACT_PATH=$zipname" >> $GITHUB_ENV
          echo "::set-output name=licenses_artifact::$zipname"

      - name: Upload License Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.LICENSES_ARTIFACT_PATH }}
          path: ${{ env.LICENSES_ARTIFACT_PATH }}

      - name: Notarize Bundle (macOS)
        # We only sign pushes to main, nightlies, RCs and final releases
        if: runner.os == 'macOS' && (github.event_name == 'schedule' || github.event_name == 'push')
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: napari-${{ env.version }}-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}
          appstore-connect-username: ${{ secrets.APPLE_NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
          primary-bundle-id: org.napari.pkg
          verbose: true

      - name: Staple Bundle (macOS)
        # We only sign pushes to main, nightlies, RCs and final releases
        if: runner.os == 'macOS' && (github.event_name == 'schedule' || github.event_name == 'push')
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: napari-${{ env.version }}-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        # CI artifact uploads only for PRs and pushes to main
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == 'main')
        with:
          name: napari-${{ env.version }}-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}
          path: napari-${{ env.version }}-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}

      - name: Get Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: get_release
        uses: bruceadams/get-release@v1.2.2

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: napari-${{ env.version }}-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}
          asset_name: napari-${{ env.version }}-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}
          asset_content_type: application/octet-stream

      - name: Upload Nightly Build Asset
        if: ${{ github.event_name == 'schedule' }}
        uses: WebFreak001/deploy-nightly@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # nightly build release from https://api.github.com/repos/napari/napari/releases
          upload_url: https://uploads.github.com/repos/napari/napari/releases/34273071/assets{?name,label}
          release_id: 34273071
          asset_path: napari-${{ env.version }}-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}
          asset_name: napari-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}
          asset_content_type: application/octet-stream
          max_releases: 1

      # Choose which one to keep; the one in `make_bundle` or this one.
      # - name: Update latest tag
      #   uses: EndBug/latest-tag@latest
      #   if: ${{ github.event_name == 'schedule' }}
      #   with:
      #     description: latest code released from nightly build
      #     tag-name: latest
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
